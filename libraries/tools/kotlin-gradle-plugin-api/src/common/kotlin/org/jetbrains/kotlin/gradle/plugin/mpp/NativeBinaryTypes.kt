/*
 * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

@file:Suppress("PackageDirectoryMismatch") // Old package for compatibility
package org.jetbrains.kotlin.gradle.plugin.mpp

import org.gradle.api.Named
import org.jetbrains.kotlin.gradle.InternalKotlinGradlePluginApi
import org.jetbrains.kotlin.konan.target.CompilerOutputKind
import org.jetbrains.kotlin.konan.target.KonanTarget
import java.util.*

/**
 * Represents the type of native build, characterized by whether it is optimized or debuggable.
 *
 * @property optimized Indicates if the build type is optimized.
 * @property debuggable Indicates if the build type is debuggable.
 */
enum class NativeBuildType(
    val optimized: Boolean,
    val debuggable: Boolean
) : Named {
    /**
     * Represents a release build type in the context of a native build.
     *
     * This type is characterized as being optimized for performance and not intended for debugging.
     *
     * @property optimized true, indicating the build type is optimized.
     * @property debuggable false, indicating the build type is not intended for debugging.
     */
    RELEASE(true, false),

    /**
     * Represents a debug build type in the context of a native build.
     *
     * This type is characterized as not being optimized for performance and intended for debugging.
     *
     * @property optimized false, indicating the build type is not optimized.
     * @property debuggable true, indicating the build type is intended for debugging.
     */
    DEBUG(false, true);

    /**
     * Retrieves the name of the native build type in lower case.
     *
     * @return The name of the native build type, converted to lower case using the English locale.
     */
    override fun getName(): String = name.toLowerCase(Locale.ENGLISH)

    /**
     * Embeds bitcode into the specified target.
     *
     * This method is deprecated and no longer performs any actions.
     * By default, it disables bitcode embedding.
     *
     * @param target The target for which bitcode embedding is being configured.
     */
    @OptIn(InternalKotlinGradlePluginApi::class)
    @Suppress("UNUSED_PARAMETER")
    @Deprecated(BITCODE_EMBEDDING_DEPRECATION_MESSAGE, ReplaceWith(""))
    fun embedBitcode(target: KonanTarget) = BitcodeEmbeddingMode.DISABLE

    /** @suppress companion **/
    companion object {
        val DEFAULT_BUILD_TYPES = setOf(DEBUG, RELEASE)
    }
}

/**
 * The `NativeOutputKind` enum represents different kinds of outputs that a Kotlin/Native compiler can generate.
 *
 * @property compilerOutputKind The kind of output generated by the compiler.
 * @property taskNameClassifier A classifier to identify the task output kind.
 * @property description A human-readable description of the output kind.
 */
enum class NativeOutputKind(
    val compilerOutputKind: CompilerOutputKind,
    val taskNameClassifier: String,
    val description: String = taskNameClassifier
) {
    /**
     * Represents an executable output kind in the Kotlin/Native compiler.
     *
     * @property compilerOutputKind Specifies that this output kind generates a program.
     * @property taskNameClassifier The classifier used to identify the task output kind as an executable.
     * @property description Provides a human-readable description indicating that this output kind is an executable.
     */
    EXECUTABLE(
        CompilerOutputKind.PROGRAM,
        "executable",
        description = "an executable"
    ),

    /**
     * Represents a test executable output kind in the Kotlin/Native compiler.
     *
     * @property compilerOutputKind Specifies that this output kind generates a program.
     * @property taskNameClassifier The classifier used to identify the task output kind as a test executable.
     * @property description Provides a human-readable description indicating that this output kind is a test executable.
     */
    TEST(
        CompilerOutputKind.PROGRAM,
        "test",
        description = "a test executable"
    ),

    /**
     * Represents a dynamic library in the Kotlin/Native build system.
     *
     * This is used to specify that the output of the compilation will be a dynamic
     * library, which can be shared and used by other processes or applications.
     *
     * @property compilerOutputKind The type of compiler output, which is set to `CompilerOutputKind.DYNAMIC`.
     * @property taskNameClassifier A classifier for task names, which is set to `shared`.
     * @property description A description of the output kind, which is "a dynamic library".
     */
    DYNAMIC(
        CompilerOutputKind.DYNAMIC,
        "shared",
        description = "a dynamic library"
    ),

    /**
     * Represents the `STATIC` output kind, denoting a static library.
     *
     * @property compilerOutputKind Specifies the kind of compiler output, here it is `CompilerOutputKind.STATIC`.
     * @property taskNameClassifier The classifier used for task names related to static libraries.
     * @property description A brief description of this output kind, indicating it as a static library.
     */
    STATIC(
        CompilerOutputKind.STATIC,
        "static",
        description = "a static library"
    ),

    /**
     * Represents a framework output kind for the Kotlin/Native compiler.
     *
     * This object defines the compiler output kind as a framework and specifies
     * its file suffix and validation for availability on given targets.
     *
     * @property compilerOutputKind Defines the type of compiler output.
     * @property taskNameClassifier Classifier used in task names.
     * @property description Description of this output kind.
     */
    FRAMEWORK(
        CompilerOutputKind.FRAMEWORK,
        "framework",
        description = "a framework"
    ) {
        override fun availableFor(target: KonanTarget) =
            target.family.isAppleFamily
    };

    /**
     * Checks if the current NativeOutputKind is available for the specified KonanTarget.
     *
     * @param target The target platform for which availability is being checked.
     * @return Boolean value indicating whether the current NativeOutputKind is available for the given target.
     */
    open fun availableFor(target: KonanTarget) = true
}

/**
 * Represents the modes of embedding LLVM IR bitcode in a binary.
 */
enum class BitcodeEmbeddingMode {
    /** Don't embed LLVM IR bitcode. */
    DISABLE,

    /** Embed LLVM IR bitcode as data. */
    BITCODE,

    /** Embed placeholder LLVM IR data as a marker. */
    MARKER,
}

/** @suppress skip deprecation message doc **/
@InternalKotlinGradlePluginApi
const val BITCODE_EMBEDDING_DEPRECATION_MESSAGE =
    "Bitcode embedding is not supported anymore. Configuring it has no effect. Corresponding DSL parameters will be removed in Kotlin 2.2"
